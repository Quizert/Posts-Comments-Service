package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"github.com/Quizert/PostCommentService/graph"
	"github.com/Quizert/PostCommentService/internal/errdefs"
	"github.com/Quizert/PostCommentService/internal/models"
	"go.uber.org/zap"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *models.Comment, limit *int, offset *int) ([]*models.Comment, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.Replies"),
	)
	log.Info("Resolving request to get replies")

	comments, err := r.commentService.Replies(ctx, obj.ID, limit, offset)
	if err != nil {
		return nil, errdefs.HandleError(err)
	}

	log.Info("Successfully get replies")
	return comments, nil
}

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input models.NewPost) (*models.Post, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.CreatePost"),
		zap.String("Title", input.Title),
		zap.Int("AuthorID", input.AuthorID),
	)
	log.Info("Received request to create new post")

	post, err := r.postService.CreatePost(ctx, input)
	if err != nil {
		log.With(zap.Error(err)).Error("Failed to create new post")
		return nil, errdefs.HandleError(err)
	}
	log.With(zap.Int("PostID", post.ID)).Info("Successfully created new post")
	return post, nil
}

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input models.NewComment) (*models.Comment, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.CreateComment"),
		zap.Int("PostID", input.PostID),
		zap.Int("AuthorID", input.AuthorID),
	)
	log.Info("Received request to create new comment")
	comment, err := r.commentService.CreateComment(ctx, input)
	if err != nil {
		log.With(zap.Error(err)).Error("Failed to create new comment")
		return nil, errdefs.HandleError(err)
	}

	err = r.subscriptionManager.Notify(ctx, comment)
	if err != nil {
		return nil, errdefs.HandleError(err)
	}
	log.With(zap.Int("CommentID", comment.ID)).Info("Successfully created new comment")
	return comment, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *models.Post, limit *int, offset *int) ([]*models.Comment, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.Comments"),
		zap.Int("PostID", obj.ID),
	)
	log.Info("Received request to get comments")

	comments, err := r.commentService.GetCommentsByPostID(ctx, limit, offset, obj.ID)
	if err != nil {
		return nil, errdefs.HandleError(err)
	}

	log.With(zap.Int("Comments", len(comments))).Info("Successfully got comments")
	return comments, nil
}

// GetPostByID is the resolver for the GetPostByID field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*models.Post, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.GetPostByID"),
		zap.Int("ID", id),
	)
	log.Info("Received request to get post by id")
	post, err := r.postService.GetPostByID(ctx, id)
	if err != nil {
		log.With(zap.Error(err)).Error("Failed to get post by id")
		return nil, errdefs.HandleError(err)
	}

	log.With(zap.Int("PostID", post.ID)).Info("Successfully got post by id")
	return post, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, limit *int, offset *int) ([]*models.Post, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.GetAllPosts"),
	)
	log.Info("Received request to get all posts")

	posts, err := r.postService.GetAllPosts(ctx, limit, offset)
	if err != nil {
		return nil, errdefs.HandleError(err)
	}
	log.With(zap.Int("Posts", len(posts))).Info("Successfully got all posts")
	return posts, nil
}

// CommentsSubscription is the resolver for the CommentsSubscription field.
func (r *subscriptionResolver) CommentsSubscription(ctx context.Context, postID int) (<-chan *models.Comment, error) {
	log := r.log.With(
		zap.String("Layer", "Resolver.CommentsSubscription"),
	)
	log.Info("Received request to get comments subscription")

	ch, err := r.subscriptionManager.CreateSubscription(ctx, postID)
	if err != nil {
		return nil, errdefs.HandleError(err)
	}
	go func() {
		<-ctx.Done()
		err = r.subscriptionManager.DeleteSubscription(ctx, postID, ch)
		if err != nil {
			log.Error("Failed to delete subscription")
		}
	}()

	log.Info("Successfully got comments subscription")
	return ch, nil
}

// Comment returns graph.CommentResolver implementation.
func (r *Resolver) Comment() graph.CommentResolver { return &commentResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
